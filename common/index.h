#ifndef __INDEX_H
#define __INDEX_H

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "../libcs50/hashtable.h"
#include "../libcs50/counters.h"

// makes struct for index
typedef struct index index_t;

/*
 * The user provides a valid number of slots for the index and we create a hashtable
 *   with index number of slots.
 * We return a pointer to index, or NULL
 */
index_t* index_new(const int slots);

/*
 * The user gives a pointer to an indx, a word, and a docID
 *
 * The given word is searched for in current index hashtable. If word is not found,
 *   a new counters is created at key and incremented at docID,
 *   otherwise the counter at docID incremented.
 *
 * We return true on successful execution and false otherwise
 */
bool index_insert(index_t* idx, const char* word, const int docID);

/*
 * The user gives a pointer to an index, and a word
 *
 * WE return the counters for the given word, or NULL if it is not in index
 */
counters_t* index_find(index_t* idx, const char* word);

/*
 * The user provides an index and a filename
 *   The entire index is saved to a file one line per word
 *     word docID count [docID count ...]
 *
 * Nothing is done is file cannot be written
 */
void index_save(index_t* idx, const char* filename);

/*
 * The user provides a filename which is assumed to be generated by the
 *   index_save function (not extensively errorchecked.
 *
 * Returns NULL on any file reading or memory error
 *
 * Otherwise returns a pointer to the created index
 */
index_t* index_load(const char* filename);

/*
 * Delete the index, free allocated memory
 */
void index_delete(index_t* idx);

#endif
